#!/bin/bash -xe

cd $(dirname $0)

EARLY_LAUNCH="$PWD/debian/early-launch"
START_PREINSTALL="$PWD/debian/start-preinstall"
WGET="$PWD/debian/wget"
XTABLES_MULTI="$PWD/debian/xtables-multi"
CA="$PWD/ca.crt"

apt-get install -y pax genisoimage build-essential git curl

mkdir -p /build/debian/
cd /build/debian/
apt-get build-dep -y debian-installer
git clone git://git.debian.org/d-i/debian-installer.git
cat <<_EOF_ > debian-installer/build/sources.list.udeb.local
# This file is automatically generated
deb [trusted=yes] copy:$PWD/debian-installer/build/ localudebs/
deb http://ftp.se.debian.org/debian bullseye main/debian-installer
_EOF_
(echo '#include "network-console"'; cat debian-installer/build/pkg-lists/netboot/amd64.cfg) > debian-installer/build/pkg-lists/netboot/amd64.cfg.new
mv debian-installer/build/pkg-lists/netboot/amd64.cfg.new debian-installer/build/pkg-lists/netboot/amd64.cfg
make -C debian-installer*/build/ reallyclean
make -C debian-installer*/build/ rebuild_netboot
wget http://cdimage.debian.org/cdimage/unofficial/non-free/firmware/bullseye/current/firmware.tar.gz -O debian-firmware.tar.gz
tar -xvzf debian-installer*/build/dest/netboot/netboot.tar.gz

function patch() {
  local OS=${1}
  # Add early-launch and update wget with a version that supports HTTPS
  mkdir -p mod
  cd mod
  zcat  ../${OS}-installer/amd64/initrd.gz | cpio -id
  cp -v ${EARLY_LAUNCH} early-launch
  chmod +x early-launch
  cp -v ${START_PREINSTALL} start-preinstall
  chmod +x start-preinstall

  # Make it possible to use iptables rules for filtering during the installer.
  # This is important when spinning up machines on unfiltered IP addresses.
  kernel_name=$(ls lib/modules/ | sort | tail -n1)
  if [ "${OS}" = "debian" ]; then
    kernel_archive="http://ftp.debian.org/debian/pool/main/l/linux"
    kernel_package=`curl -s ${kernel_archive}/ | grep "linux-image-${kernel_name}_.*_amd64.deb" | sed 's/.*a href="\([^"]*\)".*/\1/'`
  elif [ "${OS}" = "ubuntu" ]; then
    kernel_version=$(echo $kernel_name | sed 's/-[a-z]*$//')
    # linux-image-4.4.0-21-generic_4.4.0-21.37_amd64.deb
    # The "37" above is an "upload number", since we cant figure this out we
    # need to look what has actually been uploaded to the package repo,
    # really ugly.
    kernel_archive="http://archive.ubuntu.com/ubuntu/pool/main/l/linux"
    kernel_package=`curl -s ${kernel_archive}/ | grep "linux-image-${kernel_name}_${kernel_version}.*_amd64.deb" | sed 's/.*a href="\([^"]*\)".*/\1/'`
  fi

  tempdir=`mktemp -d /tmp/kernel-XXXXXXXXXX`
  mkdir ${tempdir}/deb
  mkdir ${tempdir}/extract
  curl -s -o ${tempdir}/deb/${kernel_package} ${kernel_archive}/${kernel_package}
  dpkg -x ${tempdir}/deb/${kernel_package} ${tempdir}/extract
  mkdir -p lib/modules/${kernel_name}/kernel/net/netfilter
  cp -rv ${tempdir}/extract/lib/modules/${kernel_name}/kernel/net/netfilter/* lib/modules/${kernel_name}/kernel/net/netfilter
  mkdir -p lib/modules/${kernel_name}/kernel/net/ipv4/netfilter
  cp -v ${tempdir}/extract/lib/modules/${kernel_name}/kernel/net/ipv4/netfilter/* lib/modules/${kernel_name}/kernel/net/ipv4/netfilter
  mkdir -p lib/modules/${kernel_name}/kernel/net/ipv6/netfilter
  cp -v ${tempdir}/extract/lib/modules/${kernel_name}/kernel/net/ipv6/netfilter/* lib/modules/${kernel_name}/kernel/net/ipv6/netfilter

  cp -v ${XTABLES_MULTI} sbin/

  rm usr/bin/wget
  cp -v ${WGET} usr/bin/
  mkdir -p etc/ssl
  cp -v ${CA} etc/ssl/cert.pem
  find . | cpio --create --format='newc' | gzip > \
    ../${OS}-installer/amd64/initrd.mod.gz
  cd ..
  rm -r mod
  cat ${OS}-installer/amd64/initrd.mod.gz > ${OS}-installer/amd64/initrd.gz
}

function inject_firmware() {
  local OS=${1}
  mkdir -p firmware
  tar -C firmware -zxf ${OS}-firmware.tar.gz
  pax -x sv4cpio -s'%firmware%/firmware%' -w firmware | gzip -c >firmware.cpio.gz

  # cd to the directory where you have your initrd
  cat firmware.cpio.gz >> ${OS}-installer/amd64/initrd.gz
  rm -r firmware
}

patch debian
inject_firmware debian

wget http://archive.ubuntu.com/ubuntu/dists/xenial/main/installer-amd64/current/images/netboot/netboot.tar.gz -O ubuntu-netboot.tar.gz
tar -xvf ubuntu-netboot.tar.gz ./ubuntu-installer
patch ubuntu

mkdir -p /data/{debian,ubuntu}-installer/amd64/
cp -avr debian-installer/amd64/* /data/debian-installer/amd64/
cp -avr ubuntu-installer/amd64/* /data/ubuntu-installer/amd64/
