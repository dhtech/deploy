#!/bin/bash -xe

cd $(dirname $0)

DEPLOY_SERVER="deploy.tech.dreamhack.se"
EARLY_LAUNCH="$PWD/debian/early-launch"
START_PREINSTALL="$PWD/debian/start-preinstall"
WGET="$PWD/debian/wget"
XTABLES_MULTI="$PWD/debian/xtables-multi"
IPXE_CONFIG="$PWD/ipxe/ipxe-config.h"
ESXI_ISO="vmware-esxi.iso"

if [[ ! -f "$ESXI_ISO" ]]; then
  echo "No ESXi ISO found, please download it: $(basename $ESXI_ISO)"
  exit 1
fi

apt-get install -y pax genisoimage build-essential git

test -d ipxe || git clone git://git.ipxe.org/ipxe.git
cp -v ${IPXE_CONFIG} ipxe/src/config/local/general.h
make -C ipxe/src bin/undionly.kpxe EMBED=$PWD/dhtech.ipxe CERT=/etc/ssl/ca.crt TRUST=/etc/ssl/ca.crt
cp -v ipxe/src/bin/undionly.kpxe /srv/tftp/undionly.kpxe
cp -v ipxe/src/bin/undionly.kpxe /var/www/ipxe.bin

cd /srv/tftp

apt-get build-dep -y debian-installer
git clone git://git.debian.org/d-i/debian-installer.git
cat <<_EOF_ > debian-installer/build/sources.list.udeb.local
# This file is automatically generated
deb [trusted=yes] copy:$PWD/debian-installer/build/ localudebs/
deb http://ftp.se.debian.org/debian testing main/debian-installer
_EOF_
(echo '#include "network-console"'; cat debian-installer/build/pkg-lists/netboot/amd64.cfg) > debian-installer/build/pkg-lists/netboot/amd64.cfg.new
mv debian-installer/build/pkg-lists/netboot/amd64.cfg.new debian-installer/build/pkg-lists/netboot/amd64.cfg
make -C debian-installer*/build/ reallyclean
make -C debian-installer*/build/ rebuild_netboot
wget http://cdimage.debian.org/cdimage/unofficial/non-free/firmware/testing/current/firmware.tar.gz -O debian-firmware.tar.gz
tar -xvzf debian-installer*/build/dest/netboot/netboot.tar.gz

function patch() {
  local OS=${1}
  # Add early-launch and update wget with a version that supports HTTPS
  mkdir -p mod
  cd mod
  zcat  ../${OS}-installer/amd64/initrd.gz | cpio -id
  cp -v ${EARLY_LAUNCH} early-launch
  chmod +x early-launch
  cp -v ${START_PREINSTALL} start-preinstall
  chmod +x start-preinstall

  # Make it possible to use iptables rules for filtering during the installer.
  # This is important when spinning up machines on unfiltered IP addresses.
  if [ "${OS}" = "debian" ]; then
      mkdir -p lib/modules/`uname -r`/kernel/net/netfilter
      cp -rv /lib/modules/`uname -r`/kernel/net/netfilter/* lib/modules/`uname -r`/kernel/net/netfilter
      mkdir -p lib/modules/`uname -r`/kernel/net/ipv4/netfilter
      cp -v /lib/modules/`uname -r`/kernel/net/ipv4/netfilter/* lib/modules/`uname -r`/kernel/net/ipv4/netfilter
      mkdir -p lib/modules/`uname -r`/kernel/net/ipv6/netfilter
      cp -v /lib/modules/`uname -r`/kernel/net/ipv6/netfilter/* lib/modules/`uname -r`/kernel/net/ipv6/netfilter
  fi
  if [ "${OS}" = "ubuntu" ]; then
      # 4.4.0-21-generic
      kernel_name=`ls lib/modules/`
      # 4.4.0-21
      kernel_version=`echo $kernel_name | sed 's/-[a-z]*$//'`
      # linux-image-4.4.0-21-generic_4.4.0-21.37_amd64.deb
      # The "37" above is an "upload number", since we cant figure this out we
      # need to look what has actually been uploaded to the package repo,
      # really ugly.
      kernel_archive="http://archive.ubuntu.com/ubuntu/pool/main/l/linux"
      kernel_package=`curl -s ${kernel_archive}/ | grep "linux-image-${kernel_name}_${kernel_version}.*_amd64.deb" | sed 's/.*a href="\([^"]*\)".*/\1/'`
      ubuntu_tempdir=`mktemp -d /tmp/populate-tftp-ubuntuXXXXXXXXXX`
      mkdir ${ubuntu_tempdir}/deb
      mkdir ${ubuntu_tempdir}/extract
      curl -s -o ${ubuntu_tempdir}/deb/${kernel_package} ${kernel_archive}/${kernel_package}
      dpkg -x ${ubuntu_tempdir}/deb/${kernel_package} ${ubuntu_tempdir}/extract
      mkdir lib/modules/${kernel_name}/kernel/net/netfilter
      cp -rv ${ubuntu_tempdir}/extract/lib/modules/${kernel_name}/kernel/net/netfilter/* lib/modules/${kernel_name}/kernel/net/netfilter
      mkdir lib/modules/${kernel_name}/kernel/net/ipv4/netfilter
      cp -v ${ubuntu_tempdir}/extract/lib/modules/${kernel_name}/kernel/net/ipv4/netfilter/* lib/modules/${kernel_name}/kernel/net/ipv4/netfilter
      mkdir lib/modules/${kernel_name}/kernel/net/ipv6/netfilter
      cp -v ${ubuntu_tempdir}/extract/lib/modules/${kernel_name}/kernel/net/ipv6/netfilter/* lib/modules/${kernel_name}/kernel/net/ipv6/netfilter
      rm -r ${ubuntu_tempdir}
  fi
  cp -v ${XTABLES_MULTI} sbin/

  rm usr/bin/wget
  cp -v ${WGET} usr/bin/
  mkdir -p etc/ssl
  cp -v /etc/ssl/ca.crt etc/ssl/cert.pem
  find . | cpio --create --format='newc' | gzip > \
    ../${OS}-installer/amd64/initrd.mod.gz
  cd ..
  rm -r mod
  cat ${OS}-installer/amd64/initrd.mod.gz > ${OS}-installer/amd64/initrd.gz
}

function inject_firmware() {
  local OS=${1}
  mkdir -p firmware
  tar -C firmware -zxf ${OS}-firmware.tar.gz
  pax -x sv4cpio -s'%firmware%/firmware%' -w firmware | gzip -c >firmware.cpio.gz

  # cd to the directory where you have your initrd
  cat firmware.cpio.gz >> ${OS}-installer/amd64/initrd.gz
  rm -r firmware
}

patch debian
inject_firmware debian

wget http://archive.ubuntu.com/ubuntu/dists/xenial/main/installer-amd64/current/images/netboot/netboot.tar.gz -O ubuntu-netboot.tar.gz
tar -xvf ubuntu-netboot.tar.gz ./ubuntu-installer
patch ubuntu

ln -vsf /srv/tftp/debian-installer /var/www/
ln -vsf /srv/tftp/ubuntu-installer /var/www/
ln -vsf /srv/tftp/ /var/www/tftp

# VMware ESXI stuff
mkdir -p /var/www/esxi/
mount -o loop,ro $ESXI_ISO /mnt
cp -vr /mnt/* /var/www/esxi/
umount /mnt
sed -e "s#/##g" -e "3s#^#prefix=https://deploy.tech.dreamhack.se/esxi/\n#" -i /var/www/esxi/boot.cfg
sed -i '/kernelopt=/d' /var/www/esxi/boot.cfg
echo 'kernelopt=runweasel ks=https://deploy.tech.dreamhack.se/esxi-ks.py' >> /var/www/esxi/boot.cfg
